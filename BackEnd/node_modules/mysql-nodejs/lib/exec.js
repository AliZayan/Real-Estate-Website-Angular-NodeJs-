const debug = require('debug')('MySQL'),
      Joiner = require('./joiner');

async function findExec() {
    
    let select, condition, query, join;

    select = this._select.length < 1? "*": this._select.join(', ');
    condition = this.buildCondition();
    join = this.buildJoin();

    query = `SELECT ${select} FROM ${this.name} `;

    if ( this._join && join.trim() != "")
        query += `${join} `;

    if ( Object.keys(this._conditions).length > 0 && condition != "")
        query += `WHERE ${condition} `;

    query += this._sort? `ORDER BY ${this.buildSort()} `: "";            
    query += this._limit? `LIMIT ${this._limit} `: "";
    query += this._skip? `OFFSET ${this._skip} `: "";

    let results = await this.fromSQL(query);

    // if ( this._populate )
    //     results = results.map( result => new Promise( async resolve => {
    //         // build array of promises
    //         let populates = this._populate
    //                             .map( config => {
    //                                 if ( !result[config['primaryKey']] )
    //                                     return Promise.resolve();
    //                                 let joiner = new Joiner( result, config );
    //                                 return findExec.call(joiner);
    //                             });
    //         populates = await Promise.all( populates ); 
    //         // match item to keys
    //         populates.forEach( (populate, index) => 
    //             result[this._populate[index].field] = populate[index]
    //         );
    //         return resolve( result );
    //     }));
        
    return results;
};

async function findOneExec(){
    let select, condition, query, join;

    select = this._select.length < 1? "*": this._select.join(', ');
    condition = this.buildCondition();
    join = this.buildJoin();

    query = `SELECT ${select} FROM ${this.name} `;

    if ( this._join && join.trim() != "")
        query += `${join} `;
        
    if ( Object.keys(this._conditions).length > 0 && condition != "")
        query += `WHERE ${condition} `;

    const result = await this.fromSQL(query);
    return result[0];
};

async function CountExec(){
    let condition, query;
    condition = this.buildCondition();
    join = this.buildJoin();
    query = `SELECT COUNT(*) FROM ${this.name} `;

    if ( this._join && join.trim() != "")
        query += `${join} `;

    if ( Object.keys(this._conditions).length > 0 && condition != "")
        query += `WHERE ${condition} `;
    let count = await this.fromSQL(query);
    return count[0]["COUNT(*)"];
};

module.exports = {
    findExec: findExec,
    findOneExec: findOneExec,
    countExec: CountExec
}